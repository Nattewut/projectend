from django.shortcuts import render
from django.http import JsonResponse
import json
import datetime
from .models import * 
from .utils import cookieCart, cartData, guestOrder
import requests
from django.conf import settings
import base64
from django.views.decorators.csrf import csrf_exempt
import os
from .models import Order
import time
from django.shortcuts import redirect
from .models import Product
import RPi.GPIO as GPIO
import logging

logger = logging.getLogger(__name__)

def get_base_url():
    """ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î base URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á """
    return "https://gnat-crucial-partly.ngrok-free.app"

def store(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    products = Product.objects.all()
    context = {'products': products, 'cartItems': cartItems}
    return render(request, 'store/store.html', context)

def cart(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    context = {'items': items, 'order': order, 'cartItems': cartItems}
    return render(request, 'store/cart.html', context)

def checkout(request):
    data = cartData(request)
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']
    context = {
        'items': items,
        'order': order,
        'cartItems': cartItems,
        'OPN_PUBLIC_KEY': settings.OPN_PUBLIC_KEY
    }
    return render(request, 'store/checkout.html', context)

def process_order(request):
    if request.method == "POST":
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        product1 = Product.objects.create(
            name="Shoes",
            price=15.0,
            motor_control_id=1,  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
            image="path_to_image"
        )

        product2 = Product.objects.create(
            name="Headphones",
            price=10.0,
            motor_control_id=2,  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
            image="path_to_image"
        )

        product3 = Product.objects.create(
            name="Poster",
            price=5.0,
            motor_control_id=3,  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3
            image="path_to_image"
        )

        # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        # ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:
        items = request.POST.get("items")  # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
        for item in items:
            product = Product.objects.get(id=item["product_id"])
            motor_id = product.motor_control_id

            # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
            control_motor(motor_id)

        return JsonResponse({"message": "Order processed successfully"})
    
    return JsonResponse({"error": "Invalid request"}, status=400)


@csrf_exempt
def processOrder(request):
    try:
        transaction_id = datetime.datetime.now().timestamp()
        data = json.loads(request.body)
        print("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Checkout:", data)

        if request.user.is_authenticated:
            customer = request.user.customer
            order, created = Order.objects.get_or_create(customer=customer, complete=False)
        else:
            customer, order = guestOrder(request, data)

        if "name" not in data.get("form", {}) or "email" not in data.get("form", {}):
            return JsonResponse({"error": "Missing required fields (name or email)"}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400

        calculated_total = sum(item.product.price * item.quantity for item in order.orderitem_set.all())
        print(f"üõí Order Total: {calculated_total}")

        # ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ QR Code ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó
        if calculated_total <= 0:
            return JsonResponse({'error': 'Invalid total amount'}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400

        order.transaction_id = transaction_id
        order.complete = False
        order.save()

        return create_qr_payment(order)
    except Exception as e:
        print(f"‚ùå ERROR in processOrder: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)  # ‡πÉ‡∏ä‡πâ 500 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Server Error

# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Test Mode ‡∏´‡∏£‡∏∑‡∏≠ Live Mode
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Test Mode ‡∏´‡∏£‡∏∑‡∏≠ Live Mode
MODE = os.getenv('MODE', 'TEST')

def create_qr_payment(order):
    try:
        amount = int(order.get_cart_total * 100)  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå
        base_url = get_base_url()
        url = "https://api.omise.co/charges"

        secret_key = settings.OPN_SECRET_KEY
        auth_token = base64.b64encode(f"{secret_key}:".encode()).decode()

        headers = {
            "Authorization": f"Basic {auth_token}",
            "Content-Type": "application/json"
        }

        payload = {
            "amount": amount,
            "currency": "thb",
            "source": {"type": "promptpay"},
            "description": f"Order {order.id}",
            "return_uri": f"{base_url}/payment_success/{order.id}/"
        }

        print(f"üîç ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Opn API: {payload}")
        response = requests.post(url, json=payload, headers=headers)
        data = response.json()
        print(f"üîç ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Opn API: {data}")

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Test Mode ‡∏´‡∏£‡∏∑‡∏≠ Live Mode
        if MODE == 'TEST':
            # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô Test Mode, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            if "source" not in data:
                data = {
                    "source": {
                        "scannable_code": {
                            "image": {
                                "download_uri": data.get('scannable_code', {}).get('image', {}).get('download_uri', 'https://some/fake/qr-code-image.png')
                            }
                        }
                    }
                }
                print("üîç ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Test Mode")
        
        if "source" in data and "scannable_code" in data["source"]:
            qr_code_url = data["source"]["scannable_code"]["image"]["download_uri"]
            
            # ‡∏´‡∏≤‡∏Å‡πÉ‡∏ô Test Mode ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á QR Code ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
            if MODE == 'TEST':
                return JsonResponse({
                    "message": "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Test Mode
                    "qr_code_url": qr_code_url,
                    "order_id": order.id,
                    "amount": order.get_cart_total
                })
            return JsonResponse({"qr_code_url": qr_code_url, "order_id": order.id, "amount": order.get_cart_total})

        else:
            return JsonResponse({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ"}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400

    except Exception as e:
        print(f"‚ùå ERROR ‡πÉ‡∏ô create_qr_payment: {str(e)}")
        return JsonResponse({"error": str(e)}, status=500)


@csrf_exempt
def opn_webhook(request):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Opn Payments """
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
        data = json.loads(request.body)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Webhook ‡∏•‡∏á‡πÉ‡∏ô logs
        logger.info(f"Received Webhook Data: {data}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not validate_json(data):
            logger.error("Invalid JSON format. Missing required keys.")
            return JsonResponse({"error": "Invalid JSON format. Missing required keys."}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Opn
        event = data.get("event")
        charge_id = data.get("data", {}).get("id")
        status = data.get("data", {}).get("status")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ charge_id ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if not charge_id:
            logger.error("Charge ID is missing in the request.")
            return JsonResponse({"error": "Charge ID missing"}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ event ‡πÅ‡∏•‡∏∞ status ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if event == "charge.complete" and status == "successful":
            try:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ charge_id
                order = Order.objects.get(charge_id=charge_id)
                order.complete = True
                order.save()

                # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
                for item in order.items.all():
                    motor_id = item.product.motor_control_id
                    control_motor(motor_id)

                logger.info(f"Order {order.id} successfully updated.")
                return JsonResponse({"message": "Payment verified, order updated."})
            except Order.DoesNotExist:
                logger.error(f"Order with charge_id {charge_id} not found.")
                return JsonResponse({"error": "Order not found"}, status=404)  # ‡πÉ‡∏ä‡πâ 404 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠

        # ‡∏ñ‡πâ‡∏≤ event ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà charge.complete ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        logger.warning("Payment not successful")
        return JsonResponse({"error": "Payment not successful"}, status=422)  # ‡πÉ‡∏ä‡πâ 422 ‡πÅ‡∏ó‡∏ô 400

    except json.JSONDecodeError:
        logger.error("Failed to decode JSON.")
        return JsonResponse({"error": "Invalid JSON data"}, status=400)  # 400 ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON Decode Error
    except Exception as e:
        logger.error(f"Error occurred: {str(e)}")
        return JsonResponse({"error": str(e)}, status=500)  # ‡πÉ‡∏ä‡πâ 500 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Server Error

def validate_json(data):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà """
    required_keys = ['event', 'data', 'status', 'data.id']
    for key in required_keys:
        if key not in data:
            logger.error(f"Missing key: {key}")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô logs
            return False
    return True


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPIO
GPIO.setmode(GPIO.BOARD)  # ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≤ GPIO ‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö BOARD (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏û‡∏¥‡∏ô)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ GPIO ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3 ‡∏ï‡∏±‡∏ß
motor_pin_1 = 11  # GPIO pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
motor_pin_2 = 13  # GPIO pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
motor_pin_3 = 15  # GPIO pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ GPIO ‡πÄ‡∏õ‡πá‡∏ô OUT
GPIO.setup(motor_pin_1, GPIO.OUT)
GPIO.setup(motor_pin_2, GPIO.OUT)
GPIO.setup(motor_pin_3, GPIO.OUT)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ feedback pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
motor_feedback_pin_1 = 16  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ feedback pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
motor_feedback_pin_2 = 18  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ feedback pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
motor_feedback_pin_3 = 22  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ feedback pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ feedback pins ‡πÄ‡∏õ‡πá‡∏ô INPUT
GPIO.setup(motor_feedback_pin_1, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(motor_feedback_pin_2, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(motor_feedback_pin_3, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def control_motor(motor_id):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° id """
    print(f"Controlling motor {motor_id}")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô

    # ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° id
    if motor_id == 1:
        print("Starting Motor 1...")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
        GPIO.output(motor_pin_1, GPIO.HIGH)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
        while GPIO.input(motor_feedback_pin_1) == GPIO.HIGH:
            time.sleep(0.1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö 1 ‡∏£‡∏≠‡∏ö
        GPIO.output(motor_pin_1, GPIO.LOW)  # ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1
        print("Motor 1 stopped")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1 ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß

    elif motor_id == 2:
        print("Starting Motor 2...")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
        GPIO.output(motor_pin_2, GPIO.HIGH)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
        while GPIO.input(motor_feedback_pin_2) == GPIO.HIGH:
            time.sleep(0.1)
        GPIO.output(motor_pin_2, GPIO.LOW)  # ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2
        print("Motor 2 stopped")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß

    elif motor_id == 3:
        print("Starting Motor 3...")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3
        GPIO.output(motor_pin_3, GPIO.HIGH)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3
        while GPIO.input(motor_feedback_pin_3) == GPIO.HIGH:
            time.sleep(0.1)
        GPIO.output(motor_pin_3, GPIO.LOW)  # ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3
        print("Motor 3 stopped")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3 ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
control_motor(1)  # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 1 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
control_motor(2)  # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
control_motor(3)  # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 3 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

# ‡∏õ‡∏¥‡∏î GPIO
GPIO.cleanup()

def updateItem(request):
    data = json.loads(request.body)
    productId = data.get('productId')
    action = data.get('action')
    
    print(f"‚úÖ Action: {action}, Product: {productId}")

    customer = request.user.customer
    product = Product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(customer=customer, complete=False)

    orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)

    if action == 'add':
        orderItem.quantity += 1
    elif action == 'remove':
        orderItem.quantity -= 1

    orderItem.save()

    if orderItem.quantity <= 0:
        orderItem.delete()

    return JsonResponse("Item was updated", safe=False)

def payment_success(request, order_id):
    order = Order.objects.get(id=order_id)
    return render(request, 'payment_success.html', {'order': order})

def success(request):
    return render(request, 'success.html')  

def cancel(request):
    return render(request, 'cancel.html')


