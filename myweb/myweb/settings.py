"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from dotenv import load_dotenv  # ✅ เพิ่ม dotenv สำหรับโหลดค่าจาก .env

# ✅ แก้ไขให้ใช้ BASE_DIR
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_URL = "https://gnat-crucial-partly.ngrok-free.app"
OMISE_API_VERSION = '2019-05-29'

# ✅ โหลดค่าจากไฟล์ .env (ถ้ามี)
dotenv_path = os.path.join(BASE_DIR, ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path, override=True)  # ✅ ใช้ override=True เพื่อบังคับโหลดค่าใหม่
    print("✅ โหลดไฟล์ .env สำเร็จ!")
else:
    print(f"⚠️ ไม่พบไฟล์ .env ที่ {dotenv_path} ตรวจสอบว่ามีการสร้างไฟล์แล้วหรือไม่")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z+ksf@)0d^qojbh4rnp4b1to$hq&*tt(3bs$gf(3i267g$k9ln'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ✅ อนุญาตให้ Django รับการเชื่อมต่อจาก Ngrok URL และเซิร์ฟเวอร์ภายใน
ALLOWED_HOSTS = [
    'gnat-crucial-partly.ngrok-free.app',  # ✅ เพิ่ม Ngrok URL
    '127.0.0.1',
    'localhost'
]

# ✅ แก้ไขปัญหา CSRF Verification Failed (403 Forbidden)
CSRF_TRUSTED_ORIGINS = [
    'https://gnat-crucial-partly.ngrok-free.app'  # ✅ อนุญาตให้ Ngrok ส่ง CSRF Token
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'store.apps.StoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myweb.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

from django.utils.translation import gettext as _

LANGUAGE_CODE = 'th-th'  # กำหนดให้เป็นภาษาไทย

LANGUAGES = [
    ('th', 'Thai'),
    ('en', 'English'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/images/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')

# ✅ โหลดค่า API Key จาก .env
OPN_PUBLIC_KEY = os.getenv('OPN_PUBLIC_KEY')
OPN_SECRET_KEY = os.getenv('OPN_SECRET_KEY')

if not OPN_SECRET_KEY:
    print("⚠️ OPN_SECRET_KEY ยังไม่ได้โหลด ตรวจสอบไฟล์ .env และรีสตาร์ทเซิร์ฟเวอร์")
else:
    print(f"✅ โหลด OPN_SECRET_KEY สำเร็จ!")

if not OPN_PUBLIC_KEY:
    print("⚠️ OPN_PUBLIC_KEY ยังไม่ได้โหลด ตรวจสอบไฟล์ .env และรีสตาร์ทเซิร์ฟเวอร์")
else:
    print(f"✅ โหลด OPN_PUBLIC_KEY สำเร็จ!")

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}